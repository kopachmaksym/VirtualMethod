import time
from PIL import Image

# Заздалегідь збережені значення з акселерометра
raw_data = """
5.45;-4.31;-12.32;-24.55;-34.64;39.49;
5.96;1.49;-6.79;-34.00;-31.55;11.63;
-7.96;4.31;1.37;-1.64;-38.91;-25.71;
-6.47;12.00;-0.94;1.27;-50.64;-11.53;
4.00;14.47;4.75;-8.36;-42.64;-18.67;
-4.39;9.92;2.67;-2.91;-39.18;-24.49;
-5.57;1.77;2.35;-6.00;-28.09;-31.53;
2.04;3.14;10.16;0.45;5.27;-29.90;
1.53;-1.29;8.83;-2.82;-0.55;-32.04;
-1.80;-3.84;5.73;3.36;14.36;-23.67;
0.47;-0.71;6.63;-1.00;1.45;-32.04;
0.39;0.12;8.39;-5.45;2.45;-30.51;
-0.24;-3.26;6.94;-1.09;9.64;-26.94;
2.31;0.90;8.79;2.55;4.00;-30.92;
-0.31;-1.29;8.24;1.00;5.55;-29.80;
-0.75;-1.29;8.00;0.91;5.18;-30.51;
-0.55;-1.18;8.00;1.00;5.27;-29.90;
-0.51;-1.22;7.96;1.09;5.18;-30.10;
-0.43;-1.29;7.92;0.91;5.00;-29.69;
-0.27;-1.18;7.88;0.64;5.27;-29.39;
-0.51;-0.94;8.04;0.55;4.91;-29.69;
-0.63;-0.94;8.08;0.36;4.91;-29.18;
-0.51;-1.26;7.96;0.36;5.09;-28.88;
-0.63;-1.29;7.96;0.27;5.00;-28.98;
-0.35;-1.22;7.96;0.00;5.18;-29.18;
-0.43;-1.37;7.92;0.55;5.27;-28.47;
-0.51;-1.26;8.08;0.36;5.09;-27.55;
-0.67;-1.33;7.88;0.91;5.27;-27.14;
-0.55;-1.26;7.88;0.27;4.82;-26.84;
-0.55;-1.18;7.96;0.73;4.91;-26.02;
""".strip().splitlines()

# Поріг для визначення домінуючої осі
AXIS_THRESHOLD = 7.0

# Назви файлів зображень для кожної грані
IMAGES = {
    'TOP +X': 'диплом\\1.jpg',
    'TOP -X': 'диплом\\2.jpg',
    'TOP +Y': 'диплом\\3.jpg',
    'TOP -Y': 'диплом\\4.jpg',
    'TOP +Z': 'диплом\\5.jpg',
    'TOP -Z': 'диплом\\6.jpg'
}

current_face = None
current_image = None


def determine_face(acc_x, acc_y, acc_z):
    """
    Визначає на якій грані лежить куб, базуючись на осі з найбільшим прискоренням.
    """
    axes = {
        'TOP +X': acc_x,
        'TOP -X': -acc_x,
        'TOP +Y': acc_y,
        'TOP -Y': -acc_y,
        'TOP +Z': acc_z,
        'TOP -Z': -acc_z
    }
    face = max(axes, key=axes.get)
    return face if abs(axes[face]) > AXIS_THRESHOLD else 'UNKNOWN'


def handle_face(face):
    """
    Відкриває зображення відповідно до грані, якщо вона змінилася.
    """
    global current_face, current_image

    if face == current_face or face == 'UNKNOWN':
        return

    print(f"[✓] Куб перевернуто на: {face}")

    if current_image:
        current_image.close()

    path = IMAGES.get(face)
    if path:
        try:
            current_image = Image.open(path)
            current_image.show()
            current_face = face
        except Exception as e:
            print(f"[!] Помилка відкриття зображення: {e}")
    else:
        print(f"[!] Немає зображення для: {face}")


def main():
    """
    Основна логіка — читає збережені дані построчно з паузою 1 секунда.
    """
    print("[▶] Старт імітації...")

    for line in raw_data:
        acc_vals = line.strip().split(";")
        if len(acc_vals) < 3:
            continue  # пропускаємо неправильні рядки

        try:
            acc_x, acc_y, acc_z = map(float, acc_vals[:3])
        except ValueError:
            continue  # пропускаємо рядки з помилками

        print(f"[i] Дані: {acc_x:.2f}; {acc_y:.2f}; {acc_z:.2f}")
        face = determine_face(acc_x, acc_y, acc_z)
        handle_face(face)
        time.sleep(1)

    print("[⛔] Імітацію завершено.")


if __name__ == "__main__":
    main()
